import com.nordicid.nurapi.*;
import com.nordicid.nidulib.*;
import com.nordicid.nidulib.Error;

public class NiduProg {
	 
	private static final String  NIDUPROG_VERSION = "1.1";	
	
	private static final int RETCODE_SUCCESS = 0;
	private static final int RETCODE_INVALID_ZIP = 1;
	private static final int RETCODE_TRANSPORT_ERROR = 2;
	private static final int RETCODE_PROGRAMMING_ERROR = 3;
	private static final int RETCODE_DOWNLOAD_ERROR = 4;
		
	static boolean silent = false;
	static boolean nlog = false;
	static boolean vlog = false;
	static boolean connected = false;
	
	static NurApi nur;
	static NiduLib nidu;
	
	static Error err;
	
	public static void main(String[] args) {
		
		nur = new NurApi();		
		nidu = new NiduLib();
								
		if(args.length == 0) {
			System.out.printf("\nVersions:\tNiduProg=%s NiduLib=%d NurApi=%s\n",NIDUPROG_VERSION, nidu.version(),nur.getFileVersion());				
			System.out.printf("\nUsage:\t\tniduprog <transport type> <addr> <port> <zip path> <flags>\n");
			System.out.printf("(Load firmware zip from specified path. Includes firmware(s) generated by 'UpdateZipGen' app.)\n");
			System.out.printf("\nUsage:\t\tniduprog <transport type> <addr> <port> NIDSERVER <flags>\n");
			System.out.printf("(Load latest firmware zip from NordicID server. Includes latest firmwares for all devices.)\n");
			System.out.printf("\nUsage:\t\tniduprog <transport type> <addr> <port> <URL> <flags>\n");
			System.out.printf("(Load latest firmware zip from URL)\n");
			System.out.printf("\nTransport types:\n");
			System.out.printf("TCP\t\tSocket connection <addr> = hostname or IP address <port> = target port number\n");
			System.out.printf("\t\tExample: niduprog TCP 192.168.10.2 4333 test.zip -s\n");
			System.out.printf("COM\t\tSerial port connection <addr> = COM port number <port> = Baudrate. -1 = default\n");
			System.out.printf("\t\tExample: niduprog COM 14 -1 ../packets/test.zip -s\n");
			
			System.out.printf("INT\t\tIntegrated reader connection. <addr> = 0 <port> = 0\n");
			System.out.printf("\t\tExample: niduprog INT 0 0 ../packets/test.zip -s\n");

			System.out.printf("\nflags:\n");
			System.out.printf("-s\t\tSilence mode. Not showing any messages about the updating process\n");
			System.out.printf("-log\t\tShow more detailed information about the updating process\n");
			System.out.printf("-vlog\t\tShow verbose log for NUR\n");
			
			System.out.printf("\nExit codes:\n");
			System.out.printf("0\t\tSuccess. Device upto date\n");
			System.out.printf("1\t\tInvalid zip\n");
			System.out.printf("2\t\tConnection error\n");
			System.out.printf("3\t\tProgramming error\n");
			System.out.printf("4\t\tDownload error\n");			
			
			cleanup_and_exit(RETCODE_SUCCESS);
		}
		
		System.out.printf("NiduProg version %s (NiduLib=%d NurApi=%s)\n",NIDUPROG_VERSION, nidu.version(),nur.getFileVersion());	
		System.out.printf("-------------------------------------------------------\n");
		
		nidu.setNurApi(nur);				
		nidu.setListener(mNiduLibListener);		
		nur.setListener(apiListener);
		
		for (int i = 0; i < args.length; i++)
		{
			//System.out.println(args[i]+ " ");		
			
			if (args[i].equals("-s"))
			{
				silent = true; //use silent mode
			}
			else if (args[i].equals("-log"))
				nlog = true; //Show log			
			else if (args[i].equals("-vlog"))
			{
				vlog = true; //Show verbose log for NUR	
				nur.setLogLevel(NurApi.LOG_VERBOSE);
				//nur.setLogLevel(NurApi.LOG_DATA);
			}
		}	
		
		if (!silent) System.out.printf("Loading update file from: %s\n", args[3]);
		
		if(args[3].equals("NIDSERVER"))
		{
			try {
				byte [] zipBytes = NiduLib.DownLoadFromURL("https://raw.githubusercontent.com/NordicID/nur_firmware/master/zip/NIDLatestFW.zip");
				if (!silent) System.out.printf("Downloaded %d bytes\r\n", zipBytes.length);
				err = nidu.loadZip(zipBytes);
			} catch (Exception e) {
				if (!silent) System.out.printf("Error loading zip from NIDSERVER\nError: %s NiduLastError:%s\n", e.getMessage(),nidu.getLastErrorText());		
				cleanup_and_exit(RETCODE_DOWNLOAD_ERROR);
			}
		}
		else if(args[3].toLowerCase().startsWith("http"))
		{
			try {
				byte [] zipBytes = NiduLib.DownLoadFromURL(args[3]);
				err = nidu.loadZip(zipBytes);
			} catch (Exception e) {
				if (!silent) System.out.printf("Error loading zip from Url:%s\nError: %s NiduLastError:%s\n", args[3], e.getMessage(),nidu.getLastErrorText());				
				cleanup_and_exit(RETCODE_DOWNLOAD_ERROR);
			}
		}
		else {
			err = nidu.loadZipFromFile(args[3]);
		}
			
		
		if (err != Error.NONE)
		{
			if (!silent) System.out.printf("Error loading zip: %s lasterr=%s\r\n", args[3], nidu.getLastErrorText());
			cleanup_and_exit(RETCODE_INVALID_ZIP);
		}

		if (!silent) System.out.printf("Connecting " + args[0] + " "+ args[1] + " " + args[2]+"\n");
		
		//Check type of NUR Connection: COM, internal, TCP
		if (args[0].equals("COM"))
		{
			try { //Connect to COM port
				int br=Integer.parseInt(args[2]); //Get baudrate
				if(br == -1) br = 115200;				
				NurApiTransport tr = new NurApiSerialTransport(args[0]+args[1],br);
				nur.setTransport(tr);
				nur.connect();
			}
			catch (Exception ex) {
				if(!silent) System.out.println("Cannot connect to COM port: " + ex.getMessage());
				cleanup_and_exit(RETCODE_TRANSPORT_ERROR);
			}			
		}
		else if (args[0].equals("TCP"))
		{							
			try { 
				int port=Integer.parseInt(args[2]); //Get port				
				NurApiTransport tr = new NurApiSocketTransport(args[1],port);
				nur.setTransport(tr);
				nur.connect();
			}
			catch (Exception ex) {
				if(!silent) System.out.println("Cannot connect to socket: " + ex.getMessage());
				cleanup_and_exit(RETCODE_TRANSPORT_ERROR);
			}					
		}
		else if (args[0].equals("INT"))
		{							
			try { 
				int port=0; 			
				NurApiTransport tr = new NurApiSocketTransport("integrated_reader",port);
				nur.setTransport(tr);
				nur.connect();
			}
			catch (Exception ex) {
				if(!silent) System.out.println("Cannot connect to integrated reader: " + ex.getMessage());
				cleanup_and_exit(RETCODE_TRANSPORT_ERROR);
			}					
		}

		
		try {
			
			Thread.sleep(1000);
		} catch (InterruptedException e) { }
		
		//CONNECTION OK
		System.out.println("Connection OK. Validating..");
		
		/**
		 * Device is connected and update file (zip) loaded.
		 * nidu.validate() check if zip contains suitable updates for connected device.
		 * After success validation, nidu.getStatus() return Status.READY if suitable update found.
		 * nidu.startUpdate() begins update process.
		 * NiduLibListener (niduEvent) receives information about the updating process.
		 * 
		 */
		
		err = nidu.validate();
		
		if (err == Error.NONE)
		{			
			if ( nidu.getStatus() == Status.READY)
			{			
				if (!silent) System.out.printf("Validating success\nStart update..\n");
				//There are items ready to update
				if (!silent) {
					//Show those items which are ready to update
					for(int x=0;x<nidu.getItemCount();x++) {
						
						UpdateItem item = nidu.getUpdateItem(x);
						if(item.status == Status.READY)
							System.out.printf("%s\n",item.filename);
					
					}
				}
				
				//START UPDATE PROCESS				
				if (nidu.startUpdate() != Error.NONE)
				{
					//Error occured
					if(!silent) System.out.printf("Error: nidu_start_update (%s)\n", nidu.getLastErrorText());
					cleanup_and_exit(RETCODE_PROGRAMMING_ERROR);
				}			
			}
		}
		else {
			System.out.printf("Validating Error! (%d) %s\n",err,nidu.getLastErrorText());
		}
		
		if (!silent) System.out.printf("\nSuccess! Device upto date\n");
		
		cleanup_and_exit(RETCODE_SUCCESS);

	}
	
		
	//Clean resources and exit with retcode
	private static void cleanup_and_exit(int retcode)
	{	
		try {
			if (nur.isConnected())
				nur.disconnect();

			nur.dispose();
		}
		catch(Exception e) {};			
		
				
		//nidu_close(hNidu);

		System.exit(retcode);
	}
	
static NurApiListener apiListener = new NurApiListener() {
		
		@Override
		public void triggeredReadEvent(NurEventTriggeredRead arg0) {
		}
		
		@Override
		public void traceTagEvent(NurEventTraceTag arg0) {
		}
		
		@Override
		public void programmingProgressEvent(NurEventProgrammingProgress arg0) {
		}
		
		@Override
		public void logEvent(int arg0, String arg1) {
			if (nlog || vlog)
			{
				System.out.printf("X %s\n",arg1);			
			}	
		}
		
		@Override
		public void inventoryStreamEvent(NurEventInventory arg0) {
		}
		
		@Override
		public void inventoryExtendedStreamEvent(NurEventInventory arg0) {
		}
		
		@Override
		public void frequencyHopEvent(NurEventFrequencyHop arg0) {
		}
		
		@Override
		public void disconnectedEvent() {
			connected = false;
			if (nlog)
				System.out.printf("Transport disconnected\r\n");
			
		}
		
		@Override
		public void deviceSearchEvent(NurEventDeviceInfo arg0) {
		}
		
		@Override
		public void debugMessageEvent(String arg0) {
		}
		
		@Override
		public void connectedEvent() {
			// We receive connected event when NurApi transport is connected
			connected = true;
			if (nlog)
				System.out.printf("Transport connected\r\n");
		}
		
		@Override
		public void clientDisconnectedEvent(NurEventClientInfo arg0) {
		}
		
		@Override
		public void clientConnectedEvent(NurEventClientInfo arg0) {
		}
		
		@Override
		public void bootEvent(String arg0) {
			if (nlog)
				System.out.printf("Module booted\r\n");
		}
		
		@Override
		public void IOChangeEvent(NurEventIOChange arg0) {
		}

		@Override
		public void autotuneEvent(NurEventAutotune arg0) {
		}

		@Override
		public void epcEnumEvent(NurEventEpcEnum arg0) {
		}

		@Override
		public void nxpEasAlarmEvent(NurEventNxpAlarm arg0) {
		}

		@Override
		public void tagTrackingChangeEvent(NurEventTagTrackingChange arg0) {
		}

		@Override
		public void tagTrackingScanEvent(NurEventTagTrackingData arg0) {
		}
	};
	
	static NiduLibListener mNiduLibListener = new NiduLibListener() {
		
		@Override
		public void niduEvent(Event eventType, int value, Object obj)
		{
			switch(eventType) {
			
			case LOG:			
				if(nlog)
					System.out.println(obj.toString());
				break;
			
			case STATUS:
				//if(!silent) System.out.println(obj.toString());
				break;
			
			case PRG_BEGIN:
				if(!silent) System.out.println("Status programming process of all update items is about to start");
				break;
				
			case PRG_END:
				if(!silent) System.out.println("Updating completed.");
				break;
			
			case PRG_ITEM_START:
				
				//Specific update item is about to start programming.
				//User can abort this update by calling nidu_abort(<index of update item>)
				//If there are no internal function to do FW update, user can do what ever like with data of update item. (nidu_get_fw())
				UpdateItem ui = (UpdateItem)obj;
				
				if (!silent)														
					System.out.println("Update begin for " + ui.name);					
				
				//Possibility to skip this update here by settings status to NIDU_STATUS_NOT_READY
				//ui.status = NIDU_STATUS_NOT_READY;
				
				break;
			
			case PRG_ERROR:
				String errTxt=(String)obj;
				if(!silent) System.out.println("Programming error occured:" + errTxt);
				break;
				
			case PROGRESS:
				if(!silent) System.out.printf("Updating..%d %%\r",value);
				break;
				default:
					break;
			
		}
	};

	};
}
